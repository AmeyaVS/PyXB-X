Limitations
***********

Things That Work
----------------

* Class constants corresponding to string enumeration constraints

* Simple and complex type definitions

* List and union datatypes

* Constraints on (simple) datatypes (e.g., minInclusive, length)

* Model groups and attribute groups

* Complex content models (all, sequence, choice); minOccurs and maxOccurs

* Abstract types, `xsi:type <http://www.w3.org/TR/xmlschema-1/#xsi_type>`_,
  substitution groups

* Nillable elements with `xsi:nil <http://www.w3.org/TR/xmlschema-1/#xsi_nil>`_

* Namespace qualified attributes and elements

* Most everything that isn't in the next section.

Things That Don't Work
----------------------

...but should soon
^^^^^^^^^^^^^^^^^^

* Pattern constraints don't do anything.

* The only date/time-related datatype that is implemented in this release is
  dateTime.

* Documentation present in the schema is not made available in the bindings
  (viz., I want the annotations to become docstrings).

...and probably never will
^^^^^^^^^^^^^^^^^^^^^^^^^^

* When generating a DOM instance from a binding instance, the resulting
  document should validate against the schema, but the order of elements
  within it may be different from the original order of creation.  For an
  example of this, see
  tests/test-mg-choice:TestMGChoice.testMultichoiceOrderImportant.  See also
  :api:`pyxb.binding.basis.complexTypeDefinition._validatedChildren` for a
  work-around.

* The redefine directive is not supported.

* Identity constraints ("key", "unique", "keyref") are stored in the content
  model, but are not used.

* Wildcards ("any") elements are supported in the sense that classes that
  enable them in the content model provide access to unrecognized values
  through the
  :api:`pyxb.binding.basis.complexTypeDefinition.wildcardElements` method.
  Where the type of the node is recognized, it is converted to a Python
  binding instance.  However, neither the namespace constraint nor process
  contents attributes are applied.

* Wildcard ("any") attributes are supported in the same sense as wildcard
  elements: no constraints are checked, and all are aggregated into the
  :api:`pyxb.binding.basis.complexTypeDefinition.wildcardAttributeMap`.

Things That Mostly Work, But They're Ugly
-----------------------------------------

* The ability to use templates to customize binding generation was promised
  in the vision document.  That has not yet been done, though it should be
  fairly straightforward.

* Processing of include and import directives is a little too fragile.

Intended Near-Term Enhancements
-------------------------------

* Customized WSDL support to work around inconsistencies in the SOAP
  encoding handling of schema.

