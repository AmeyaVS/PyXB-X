.. _bindingModel:

Binding Model
=============

The binding model represents the relations between Python classes that
correspond to schema components.  The class hierarchy for the binding model
is depicted in the following diagram.

.. image:: Images/BindingModel.jpg

There are three primary groups of classes, which in turn depend on some
supporting capabilities, all of which are described in the following
sections.

Supporting Capabilities
-----------------------

:api:`pyxb.binding.basis._Binding_mixin` is a marker class which also holds
the :api:`pyxb.namespace.NamespaceContext` information about the binding.
The context is used both for translating XML documents into instances of the
binding class, and for generating multi-namespace XML documents from
instances.

:api:`pyxb.binding.basis._TypeBinding_mixin` extends
:api:`pyxb.binding.basis._Binding_mixin` to indicate that the incorporating
class represents a binding associated with a type definition (whether simple
or complex).

Every class that is bound to a nameable schema component overrides its
:api:`pyxb.binding.basis._Binding_mixin._Namespace` to be a reference to the
:api:`pyxb.namespace.Namespace` instance for the module to which it belongs,
and its :api:`pyxb.binding.basis._Binding_mixin._XsdName` to be the unicode
name of the component within its namespace category.  This allows
introspection and eventually support for ``xsi:type`` resolution.

.. _binding_deconflictingNames:

Deconflicting Names
^^^^^^^^^^^^^^^^^^^

In XML schema, the namespaces for element declarations, type definitions, and
attribute definitions are all distinct.  Python uses the same namespace for
everything.  So, if you have a schema that defines a simple type ``color``,
the schema can also have an element named ``color`` with a complex type that
itself has both a child element named ``color`` and a distinct attribute (of
type ``color``) that is also named ``color``.  Since the natural
representation of elements and attributes inside complex types is also by
their XML name, the chances of conflict are high.

PyXB resolves this by ensuring every identifiable object has a unique
identifier within its context.  The steps involved are:

#. Make object name into an :api:`identifier
   <pyxb.utils.utility.MakeIdentifier>` by stripping out non-printable
   characters, replacing characters that cannot appear in identifiers with
   underscores, stripping leading underscores, and prefixing an initial
   digit with the character 'n'.

#. :api:`Deconflict <pyxb.utils.utility.DeconflictKeyword>` the resulting
   identifier from Python :api:`reserved identifiers
   <pyxb.utils.utility._Keywords>` and other context-specific keywords.

#. Prepend the standard prefix that denotes the identifier's :ref:`visibility
   <identifier_naming>` (public, protected, private)

#. Make the resulting identifier :api:`unique <pyxb.utils.utility.MakeUnique>`
   within its context (containing class or module).

These steps are encapsulated into a single function
:api:`pyxb.utils.utility.PrepareIdentifier` which takes parameters that
customize the context for the identifier.

In addition to name conflicts with namespace-global identifiers appearing
directly in the module, conflicts may also appear within a binding class as a
result of collision with names from Python keywords, public class names, and
public field or method names in the class.  The
:api:`pyxb.utils.utility._DeconflictSymbols_mixin` is used to refine the set
of type-specific public names.  If you customize a generated binding class by
extending from it, you must specific your own class variable
``_ReservedSymbols`` with a value that is the union of your symbols and those
of the superclass(es) (see :api:`pyxb.utils.utility._DeconflictSymbols_mixin`
for details).

Deconfliction of module-level names occurs prior to :api:`code generation
<pyxb.binding.generate.GeneratePython>`.  Identifiers are deconflicted in
favor of higher items on this list:

- Python keywords
- Public class identifiers
- Element tags
- Complex or simple type definition tags
- Enumeration tags
- Attribute tags

.. _binding_customization:

Support for Customization
^^^^^^^^^^^^^^^^^^^^^^^^^

One of the primary goals of PyXB is to support Python modules which customize
the generated bindings by adding both functionality and derived content.
Maintenance issues require that these extensions exist separately from the
automatically-generated binding modules; usability requires that they inherit
from the automatically-generated modules.  This is supported by the
:api:`pyxb.binding.basis._DynamicCreate_mixin` class.

This class provides a :api:`method
<pyxb.binding.basis._DynamicCreate_mixin._DynamicCreate>` which is used by
the generated bindings to create new instances of themselves.  The raw
bindings are generated into a sub-module with the prefix ``raw``, and the
extensions modify the generated class to record the real class that should
be used when new instances are created as a result of converting an XML
document into a binding object.

For example, if a binding is to be created in a module ``dinner``, the
``--generate-raw-binding`` flag would be used on :ref:`pyxbgen <pyxbgen>` to
generate the binding in a file named ``raw/dinner.py``.  The wrapper module
``dinner.py`` would contain the following code (assuming that the class
``parsnip`` was to be extended)::

  # Bring all public symbols up from the generated one
  from raw.dinner import *
  # Rename the generated parsnip so we can reference it
  import raw.dinner.parsnip as raw_parsnip
  # Replace the generated parsnip with a customizing extension
  class parsnip (raw_parsnip):
    # Customization here
    pass
  # Register the customization for use by the binding infrastructure
  raw_parsnip._SetSupersedingClass(parsnip)

With this pattern, objects created by the user through ``dinner.parsnip()``
and from XML documents by the ``CreateFromDOM`` infrastructure will both be
instances of the extending wrapper class.


Simple Type Definitions
-----------------------

`Simple type definitions
<http://www.w3.org/TR/xmlschema-1/#Simple_Type_Definitions>`_ derive from
:api:`pyxb.binding.basis.simpleTypeDefinition` and a standard Python type.
These classes support a
:api:`pyxb.binding.basis.simpleTypeDefinition.Factory` method which is used
as a generic mechanism to create new instances of the class.  New instance
creation is validated against the `facets
<http://www.w3.org/TR/xmlschema-2/#rf-facets>`_ recorded in the binding
class.

Constraining Facets
^^^^^^^^^^^^^^^^^^^

Each class corresponding to a simple type definition has class variables for
the `constraining facets <http://www.w3.org/TR/xmlschema-2/#rf-facets>`_
that are valid for that class.  These variables are named by prefixing the
facet name with ``_CF_``, and have a value that is an instance of the
corresponding :api:`facet class <pyxb.binding.facets>`.  Where possible, the
variables are inherited from the parent class; when a simple type is derived
by restriction, the restricted class overrides its parent with a new value
for the corresponding facet.

Facets incorporate schema-specific constraining values with some code that
validates potential instances of the type against the constraints.
Constraining values may:

- be of a fixed type, as with `length
  <http://www.w3.org/TR/xmlschema-2/#rf-length>`_;

- take on a value in the value space of the simple type in which the facet
  appears, as with `minInclusive
  <http://www.w3.org/TR/xmlschema-2/#rf-minInclusive>`_; or

- take on a value in the value space of the superclass of the simple type in
  which the facet appears, as with `minExclusive
  <http://www.w3.org/TR/xmlschema-2/#rf-minExclusive>`_;

Enumeration and pattern constraints maintain a list of the respective
acceptable enumeration and pattern values.  Currently, enumeration
constraints are checked, while patterns are ignored.

Facets implement the
:api:`pyxb.binding.facets.ConstrainingFacet.validateConstraint` method,
which in turn is invoked by the
:api:`pyxb.binding.basis.simpleTypeDefinition.XsdConstraintsOK` clas method
when given a value that may or may not satisfy the constraints.
The :api:`pyxb.binding.basis.simpleTypeDefinition.Factory` will normally
validate the constraints before allowing a new instance to be returned.

List Types
^^^^^^^^^^

Simple types that derive by `list
<http://www.w3.org/TR/xmlschema-2/#atomic-vs-list>`_ extend from
:api:`pyxb.binding.basis.STD_list` which in turn descends from the Python
``list`` type.  These derived classes must override the base class
:api:`pyxb.binding.basis.STD_list._ItemType` value with the appropriate
class to use when creating or validating list members.

Union Types
^^^^^^^^^^^

Union types are classes that are never instantiated.  Instead, the binding
classes must define a :api:`pyxb.binding.basis.STD_union._MemberTypes`
variable which contains a list of binding classes that are permitted as
members of the union.  The :api:`pyxb.binding.basis.STD_union.Factory`
method attempts, in turn, to create an instance of each potential member
type using the arguments passed into it.  The returned value is the first
instance that was successfully created.

Note that this means the fact that a particular attribute in an element is a
member of a union is not recorded in the attribute value.  See
:ref:`attributeUse`.

Complex Type Definitions
------------------------

`Complex type definitions
<http://www.w3.org/TR/xmlschema-1/#Complex_Type_Definitions>`_ derive from
:api:`pyxb.binding.basis.complexTypeDefinition`.  Classes representing
complex type definitions record maps that specify :api:`attribute
<pyxb.binding.content.AttributeUse>` use structures to record attributes of
the value.  The attribute values are stored in class members, and when using
the default code generation template are managed through accessor functions.

The base :api:`pyxb.binding.basis.complexTypeDefinition` class provides the
infrastructure to identify the appropriate attribute or element given an XML
tag name.  For classes corresponding to types that enable `wildcards
<http://www.w3.org/TR/xmlschema-1/#Wildcards>`_, it also provides a
mechanism to access unrecognized elements and attributes.  Wildcard elements
are converted to binding instances if their namespace and name are
recognized, and otherwise are left as DOM nodes.  Wildcard attributes are
stored in a map from their extended namespace name to the unicode value of
the attribute.

Empty Content
^^^^^^^^^^^^^

There is no content in these classes.


Simple Content
^^^^^^^^^^^^^^

The :api:`pyxb.binding.basis.CTD_simple` class supports complex types with
simple content (i.e., those in which the body of the element is an octet
sequence in the lexical space of a specified simple type).  The type of data
that serves as content is specified in
:api:`pyxb.binding.basis.CTD_simple._TypeDefinition`.  The
:api:`pyxb.binding.basis.CTD_simple.content` method returns the instance of
that type that corresponds to the content of the object.

Be aware that the need to invoke can be a little confusing: if you have an
object that is a subclass of :api:`pyxb.binding.basis.CTD_simple`, it is
natural to treat it the way you would treat a
:api:`pyxb.binding.basis.simpleTypeDefinition` instance.  This won't work: the
simple type instance is substitutable for its Python base type, where the
complex type instance is not.

As a convenience, the ``__str__`` method of
:api:``pyxb.binding.basis.CTD_simple`` has been overridden to be equivalent to
``str(self.content())``.

Mixed and Element-Only Content
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Mixed and element-only content
<http://www.w3.org/TR/xmlschema-1/#content_type>`_ nodes assign values to
their :api:`element maps
<pyxb.binding.basis.complexTypeDefinition._ElementUses>` variable to manage
the mapping from XML schema element names to class members.  The element and
attribute names are distinct.  These classes also associate a :api:`content
model <pyxb.binding.content.ContentModel>` to ensure the constraints of the
schema are satisfied.  These structures are described in
:ref:`contentModel`.

The :api:`pyxb.binding.basis._CTD_content_mixin.content` method returns a
list, in parsed order, of the Python objects and (if mixed) non-element
content that belongs to the instance.

Elements
--------

A binding class representing an `element declaration
<http://www.w3.org/TR/xmlschema-1/#cElement_Declarations>`_ assigns to its
:api:`pyxb.binding.basis.element._TypeDefinition` value the Python subclass
of :api:`pyxb.binding.basis.complexTypeDefinition` of which values of the
element must be an instance.

An element instance maintains a reference to the instance of its type as a
private variable ``__realContent``.  It also maintains a reference
``__content`` which is equivalent to either ``__realContent`` or
``__realContent.content()``.  The latter case holds when ``__realContent`` is
an instance of :api:`pyxb.binding.basis.CTD_simple`.  This means that if the
element type is a complex type with simple content, invoking
``element.content()`` will automatically dereference to get the underlying
simple type object that is held by the complex type object.

:api:`pyxb.binding.basis.element` overrides its ``__getattr__`` method so that
references to (Python) attributes that are not defined in the class are
delegated to the underlying content value (``__realContent`` preferred over
``__content``).  This allows user code to reference complex type definition
elements and attributes more conveniently.

.. ignored
   ## Local Variables:
   ## fill-column:78
   ## indent-tabs-mode:nil
   ## End:

