**************
User Reference
**************

.. _pyxbgen:

Creating bindings with ``pyxbgen``
==================================

.. table:: Command line parameters to ``pyxbgen``

   ==========================  ===============  ======  =============================================
   Long Option                 Argument         Alt     Description
   ==========================  ===============  ======  =============================================
   ``--module-path``           *module-path*    ``-m``  The python module path for the generated
                                                        bindings, excluding the binding module itself
   ``--schema-uri``            *uri*            ``-u``  The URI for the schema from which bindings 
                                                        are to be generated.
   ``--generate-raw-binding``                           Generate the bindings in a subdirectory ``raw``
                                                        so that customized wrappers can be written
   ``--write-schema-path``     *xsd-file*       ``-s``  Write the schema text to the specified file
   ``--uri-is-wsdl``                            ``-W``  Indicate that the URI is a WSDL definition
                                                        (schema is extracted from ``types`` element)
   ``--save-component-model``                   ``-C``  Save a pickled copy of the namespace component
                                                        model in the same directory as the binding
   ==========================  ===============  ======  =============================================

The module path and schema URI are required.  Raw bindings allow the user to
import the module and obtain :ref:`customized classes
<binding_customization>` that augment the pure data with functionality or
additional data.  Optionally, the XML document retrieved from the URI can be
stored into a local file for review (usually important when working with
WSDL definitions).  If the XML document is a WSDL definition, only the
``types`` portion is extracted.  Last, the component model must be saved if
the subsequent bindings are to be generated for namespaces that refer to
defined objects in this namespace.

The following sections reference example schema and programs that are
available in the ``examples/manual`` subdirectory of the PyXB distribution.

Self-contained schema
---------------------

The following schema ``po1.xsd`` is a condensed version of the `purchase
order schema <http://www.w3.org/TR/xmlschema-0/#POSchema>`_ in the XMLSchema
Primer:

.. literalinclude:: ../examples/manual/po1.xsd

Translate this into Python with the following command::

  pyxbgen -u po1.xsd  -m po1

Then this program:

.. literalinclude:: ../examples/manual/demo1.py

when processing this document:

.. literalinclude:: ../examples/manual/po1.xml

produces the following output::

 Robert Smith is sending Alice Smith 2 thing(s):
   Quantity 1 of Lapis necklace at $99.95
   Quantity 4 of Plastic necklace at $3.95

Multi-document schema
---------------------

Complex schema are more easy to manage when they are separated into multiple
documents, each of which contains a cohesive set of types.  In the example
above, the USAddress can be abstracted to handle a variety of addresses, and
maintained as its own document ``address.xsd``:

.. literalinclude:: ../examples/manual/address.xsd

The XMLSchema `include directive
<http://www.w3.org/TR/xmlschema-1/#compound-schema>`_ can be used to
incorporate this document into ``po2.xsd``:

.. literalinclude:: ../examples/manual/po2.xsd

Translation of this document and execution of the test program is just as it
was in the previous section.

Multi-namespace documents
-------------------------

Documents of significant complexity are likely to require references to
multiple namespaces.  You may have noticed that the schemas we've looked at
so far have :ref:`no namespace <absentNamespaces>` for both their target and
default namespaces.  The following schema ``nsaddress.xsd`` places the types
that are in ``address.xsd`` into the namespace ``URN:address``:

.. literalinclude:: ../examples/manual/nsaddress.xsd

A third variant of the purchase order schema can reference this namespace by
using the `import directive
<http://www.w3.org/TR/xmlschema-1/#composition-schemaImport>`_:

.. literalinclude:: ../examples/manual/po3.xsd

For this schema, it is necessary to first translate the address schema.  In
addition to generating the Python bindings, we must also save the namespace
as a Python object so we can look up types in it when processing the
purchase order schema.


Customized bindings
-------------------

Standard bindings
=================

WSDL
----

