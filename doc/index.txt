.. PyXB documentation master file

.. role:: namespace(literal)

################################
PyXB: Python XML Schema Bindings
################################

PyXB ("pixbee") is a pure `Python <http://www.python.org>`_ package that
generates Python source code for classes that correspond to data structures
defined by `XMLSchema <http://www.w3.org/XML/Schema>`_.  The generated classes
support bi-directional conversion between `XML <http://www.w3.org/XML/>`_
documents and Python instances.  In concept it is similar to `JAXB
<http://en.wikipedia.org/wiki/JAXB>`_ for Java and `CodeSynthesis XSD
<http://www.codesynthesis.com/products/xsd/>`_ for C++.  A
:ref:`thirty_sec_example` is at the bottom of this page.

For downloads, support, etc. please see the `PyXB project page
<http://sourceforge.net/projects/pyxb>`_ on SourceForge.

** WARNING ** 0.5.0 is a :ref:`BETA RELEASE<releases>`.  Documentation is not up
to date.

** NEW ** Supports :ref:`ex_opengis`.

********
Contents
********
.. toctree::
   :maxdepth: 2

   overview
   examples
   releases
   architecture
   userref
   maintref

.. _thirty_sec_example:

*********************
Thirty Second Example
*********************

An example of a program using PyXB to interact with a `web service
<http://wiki.cdyne.com/wiki/index.php?title=CDYNE_Weather>`_ using an
automatically-generated module.  First, retrieve the WSDL and generate the
bindings::

 vmfed9[23]$ pyxbgen -W 'http://ws.cdyne.com/WeatherWS/Weather.asmx?wsdl' -m weather
Retrieving WSDL from http://ws.cdyne.com/WeatherWS/Weather.asmx?wsdl
http://www.w3.org/2001/XMLSchema: 46 typeDefinition -- activated
http://schemas.xmlsoap.org/wsdl/: 20 typeBinding -- activated
xml=http://www.w3.org/XML/1998/namespace: 4 attributeDeclaration -- activated
Need to dynamically create schema for http://www.w3.org/2001/XMLSchema
NOTE: Created unbound (DOM) wildcard element from {http://www.w3.org/2001/XMLSchema}schema
NOTE: Created unbound (DOM) wildcard element from {http://schemas.xmlsoap.org/wsdl/mime/}mimeXml
NOTE: Created unbound (DOM) wildcard element from {http://schemas.xmlsoap.org/wsdl/mime/}mimeXml
NOTE: Created unbound (DOM) wildcard element from {http://schemas.xmlsoap.org/wsdl/mime/}mimeXml
NOTE: Created unbound (DOM) wildcard element from {http://schemas.xmlsoap.org/wsdl/mime/}content
NOTE: Created unbound (DOM) wildcard element from {http://schemas.xmlsoap.org/wsdl/mime/}mimeXml
NOTE: Created unbound (DOM) wildcard element from {http://schemas.xmlsoap.org/wsdl/mime/}content
NOTE: Created unbound (DOM) wildcard element from {http://schemas.xmlsoap.org/wsdl/mime/}mimeXml
NOTE: Created unbound (DOM) wildcard element from {http://schemas.xmlsoap.org/wsdl/mime/}content
NOTE: Created unbound (DOM) wildcard element from {http://schemas.xmlsoap.org/wsdl/mime/}mimeXml
http://www.w3.org/2001/XMLSchema: 46 typeDefinition -- activated
http://schemas.xmlsoap.org/wsdl/: 20 typeDefinition -- activated
http://schemas.xmlsoap.org/wsdl/http/: 3 typeBinding -- activated
xml=http://www.w3.org/XML/1998/namespace: 4 attributeDeclaration -- activated
http://www.w3.org/2001/XMLSchema: 46 typeDefinition -- activated
xml=http://www.w3.org/XML/1998/namespace: 4 attributeDeclaration -- activated
http://www.w3.org/2001/XMLSchema: 46 typeDefinition -- activated
http://schemas.xmlsoap.org/wsdl/: 20 typeDefinition -- activated
xml=http://www.w3.org/XML/1998/namespace: 4 attributeDeclaration -- activated
http://www.w3.org/2001/XMLSchema: 46 typeDefinition -- activated
http://schemas.xmlsoap.org/wsdl/: 20 typeDefinition -- activated
http://schemas.xmlsoap.org/wsdl/soap12/: 12 typeBinding -- activated
xml=http://www.w3.org/XML/1998/namespace: 4 attributeDeclaration -- activated
http://www.w3.org/2001/XMLSchema: 46 typeDefinition -- activated
http://schemas.xmlsoap.org/wsdl/: 20 typeDefinition -- activated
http://schemas.xmlsoap.org/wsdl/soap/: 11 typeBinding -- activated
xml=http://www.w3.org/XML/1998/namespace: 4 attributeDeclaration -- activated
WARNING: Referenced http://microsoft.com/wsdl/mime/textMatching/ has no schema components
Python for http://ws.cdyne.com/WeatherWS/ requires 1 modules
Saved binding source to ./weather.py

Then write a program that uses them:

.. literalinclude:: ../examples/weather/client_get.py

And run it::

 vmfed9[24]$ python client_get.py
 Weather forecast for Tucson, AZ:
   Saturday, May 02 2009: Partly Cloudy, from  to 64
   Sunday, May 03 2009: Sunny, from 43 to 66
   Monday, May 04 2009: Partly Cloudy, from 45 to 69
   Tuesday, May 05 2009: Mostly Cloudy, from 54 to 69
   Wednesday, May 06 2009: Partly Cloudy, from 47 to 69
   Thursday, May 07 2009: Mostly Cloudy, from 49 to 66
   Friday, May 08 2009: Partly Cloudy, from 48 to 67
 vmfed9[25]$ 

That's it.

******************
Indices and tables
******************

* :ref:`genindex`
* :ref:`search`

.. ignored
   ## Local Variables:
   ## fill-column:78
   ## indent-tabs-mode:nil
   ## End:
