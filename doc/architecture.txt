The Python structures that hold schema-related data are directly related to
the schema components defined in the XMLSchema specification.  Familiarity
with the material in http://www.w3.org/TR/xmlschema-1 is valuable.

A set of UML diagrams hand-extracted from the XMLSchema schema was used to
gain initial understanding of the relationship between elements of a schema
XML representation.

A companion set of UML diagrams displays the relationship between the Python
classes that comprise the XMLSchema.structures module, which is the core of
the system.

Design Choices
==============

PyWXSB
------

Most XMLSchema are relatively small, so holding the entire definition in
memory is not an issue.  The complexity of XMLSchema can require multiple
passes over the element structure to resolve forward references or select
child nodes of interest at different stages.  As a consequence of these
points, the Document Object Model was selected as the internal
representation of XML within PyWXSB.  Level 2 DOM conformance is assumed.

Though PyWXSB currently uses the xml.dom.minidom implementation, there is no
intention to rely on any implementation-specific features of this.  It is,
however, assumed that certain DOM constructs will be available in a
"Pythonic" manner.  For example, NodeList instances should support the
capabilities of a Python sequence rather than requiring invocation of the
item() method in an iteration up to the list length.

Generated Bindings
------------------

The default templates for generated code use the Document Object Model as
their source for instance documents.  They assume the implementation
supports a Pythonic interface.  If an implementation supports only a strict
DOM interface, a custom template may be required.

