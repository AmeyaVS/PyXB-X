#!/usr/bin/env python

import pyxb.binding.generate
import os.path
import sys
import textwrap

generator = pyxb.binding.generate.Generator()
parser = generator.optionParser()
parser.add_option('-W', '--wsdl-location', metavar='FILE_or_URL',
                  action='append',
                  help=\
'''Generate bindings for the C{types} stanza of the WSDL at this
location.  This option is equivalent to retrieving the WSDL,
extracting the schema part of its C{types} block to a file, and using
that file as a --schema-location.''')

col_long_opt = ( 'Long Option', 28 )
col_arg = ( 'Argument', 15 )
col_alt = ( 'Alt', 6 )
col_description = ( 'Description', 50)

long_opts = []
short_opts = []
metavars = []
descriptions = []

class OptionGroupDocumentation:

    __optionList = None
    __longOptions = None
    __shortOptions = None
    __metavars = None
    __descriptions = None

    __predent = '   '
    __indent = '  '

    def __init__ (self, option_list=None, group=None, title=None, description=None, underscore=None):
        if group is not None:
            option_list = group.option_list
            title = group.title
            description = group.description
        self.__title = title
        self.__description = description
        self.__underscore = underscore
        self.__optionList = option_list
        self.__longOptions = []
        self.__shortOptions = []
        self.__metavars = []
        self.__descriptions = []
        self._extractColumnData()
        
    def _extractColumnData (self):
        for opt in self.__optionList:
            self.__longOptions.append(' '.join('``%s``' % (_o,) for _o in opt._long_opts) )
            self.__shortOptions.append(' '.join('``%s``' % (_o,) for _o in opt._short_opts) )
            if opt.metavar is None:
                self.__metavars.append('')
            else:
                self.__metavars.append('*%s*' % opt.metavar)
            self.__descriptions.append(opt.help)

        self.__longHeader = 'Long Option'
        self.__metavarHeader = 'Argument'
        self.__shortHeader = 'Alt'
        self.__descriptionHeader = 'Description'
        self.__longWidth = max([len(_s) for _s in self.__longOptions + [self.__longHeader]])
        self.__metavarWidth = max([len(_s) for _s in self.__metavars + [self.__metavarHeader]])
        self.__shortWidth = max([len(_s) for _s in self.__shortOptions + [self.__shortHeader]])
        self.__descriptionWidth = 50


        self.__fields = ( ( self.__longHeader, self.__longWidth ),
                          ( self.__metavarHeader, self.__metavarWidth ),
                          ( self.__shortHeader, self.__shortWidth ),
                          ( self.__descriptionHeader, self.__descriptionWidth ) )

        self.__separator = self.__predent
        self.__header = self.__predent
        for (name, width) in self.__fields:
            self.__separator += ('=' * width) + self.__indent
            self.__header += name.ljust(width) + self.__indent

    def __str__ (self):
        rv = []
        rv.append(self.__title)
        rv.append(self.__underscore * len(self.__title))
        rv.append('')
        rv.append(self.__description)
        rv.append('')
        rv.append('.. table:: %s' % (self.__title,))
        rv.append('')
        rv.append(self.__separator)
        rv.append(self.__header)
        rv.append(self.__separator)
        for i in range(len(self.__longOptions)):
            wrapped_help = textwrap.wrap(self.__descriptions[i], self.__descriptionWidth)
            long_val = self.__longOptions[i]
            metavar_val = self.__metavars[i]
            short_val = self.__shortOptions[i]
            for h in wrapped_help:
                rv.append( ''.join([ self.__predent, long_val.ljust(self.__longWidth),
                                     self.__indent, metavar_val.ljust(self.__metavarWidth),
                                     self.__indent, short_val.ljust(self.__shortWidth),
                                     self.__indent, h ]))
                long_val = metavar_val = short_val = ''
        rv.append(self.__separator)
        rv.append('')
        return "\n".join(rv)

print OptionGroupDocumentation(option_list=parser.option_list, title='``pyxbgen`` Command Line Options', underscore='*', description='')
for g in parser.option_groups:
    print OptionGroupDocumentation(group=g, underscore='-')
    
# LocalVariables:
# mode:python
# End:

