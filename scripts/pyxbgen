#!/usr/bin/env python

import pyxb.xmlschema
import pyxb.binding.generate
import pyxb.utils.utility
import pyxb.utils.domutils
import os.path
import sys

generator = pyxb.binding.generate.Generator()
parser = generator.optionParser()
parser.add_option('-W', '--wsdl-location', metavar='FILE_or_URL',
                  action='append',
                  help=\
'''Generate bindings for the C{types} stanza of the WSDL at this
location.  This option is equivalent to retrieving the WSDL,
extracting the schema part of its C{types} block to a file, and using
that file as a --schema-location.''')

(options, args) = parser.parse_args()

if options.wsdl_location is not None:
    import pyxb.standard.bindings.wsdl as wsdl
    wsdl.ImportRelatedNamespaces()
    for wsdl_uri in options.wsdl_location:
        wsdl_uri = pyxb.utils.utility.NormalizeLocation(wsdl_uri)
        print 'Retrieving WSDL from %s' % (wsdl_uri,)
        xmlns = pyxb.utils.utility.TextFromURI(wsdl_uri)
        spec = wsdl.definitions.createFromDOM(pyxb.utils.domutils.StringToDOM(xmlns), process_schema=True, wsdl_location=wsdl_uri)
        generator.addSchema(spec.schema())
generator.applyOptionValues(options, args)

generator.resolveExternalSchema()

if 0 == len(generator.namespaces()):
    parser.print_help()
    sys.exit(1)

import sys
import traceback

# Save binding source first, so name-in-binding is stored in the
# parsed schema file
try:
    tns = generator.namespaces().pop()
    modules = generator.bindingModules()
    print 'Python for %s requires %d modules' % (tns, len(modules))

    top_module = None
    path_dirs = set()
    for m in modules:
        m.writeToModuleFile()

    generator.writeNamespaceArchive()
except Exception, e:
    print 'Exception generating bindings: %s' % (e,)
    traceback.print_exception(*sys.exc_info())
    sys.exit(3)

# LocalVariables:
# mode:python
# End:

