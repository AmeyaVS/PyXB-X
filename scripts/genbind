#!/usr/bin/env python

import pyxb.xmlschema
from pyxb.binding.generate import GeneratePython

import sys
import traceback
from xml.dom import minidom
from xml.dom import Node
     
module_path = 'pyxb.standard.bindings'
schema_file = 'pyxb/standard/schemas/xml.xsd'
binding_path = 'pyxb/standard/bindings'
prefix = 'xml'

if 1 < len(sys.argv):
    schema_file = sys.argv[1]
if 2 < len(sys.argv):
    binding_path = sys.argv[2]
if 3 < len(sys.argv):
    prefix = sys.argv[3]

parsed_schema_file = '%s/%s.wxs' % (binding_path, prefix)
binding_file = '%s/%s.py' % (binding_path, prefix)

wxs = None
ns = None
try:
    wxs = pyxb.xmlschema.schema.CreateFromDOM(minidom.parse(schema_file))
    ns = wxs.targetNamespace()
    ns.setModulePath('%s.%s' % (module_path, prefix))
    print 'Extracted schema information from %s, yielding namespace %s' % (schema_file, ns)
except Exception, e:
    print  'Exception processing %s: %s' % (schema_file, e)
    traceback.print_exception(*sys.exc_info())
    sys.exit(1)

# Save binding source first, so name-in-binding is stored in the
# parsed schema file
try:
    binding_source = GeneratePython(schema=wxs, schema_file=schema_file)
    print 'Binding source is %d long to %s' % (len(binding_source), binding_file)
    file(binding_file, "w").write(binding_source)
    print 'Saved binding source to %s' % (binding_file,)
except Exception, e:
    print 'Exception generating bindings to %s: %s' % (binding_file, e)
    traceback.print_exception(*sys.exc_info())
    sys.exit(3)

try:
    ns = wxs.targetNamespace()
    if ns.isAbsentNamespace():
        ns._overrideAbsentNamespace('URN:%s' % (prefix,))
    ns.saveToFile(parsed_schema_file)
    print 'Saved parsed schema to %s' % (parsed_schema_file,)
except Exception, e:
    print 'Exception saving preprocessed schema to %s: %s' % (parsed_schema_file, e)
    traceback.print_exception(*sys.exc_info())
    sys.exit(2)

# LocalVariables:
# mode:python
# End:

