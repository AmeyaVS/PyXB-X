#!/usr/bin/env python

import getopt
import sys
import pyxb.xmlschema
from pyxb.binding.generate import GeneratePython

# module path prefix
# schema uri
# prefix to use for schema
# whether generated bindings should be marked as raw
# whether component model should be saved
# map for imported namespaces

module_path_prefix = ''         # -m
schema_uri = None               # -u
schema_prefix = None            # -p
generate_raw_binding = False    # -r
save_component_model = False    # -C
uri_is_wsdl = False             # -W

options = [
    ('m', 'module-path-prefix', True, 'The Python module path for the generated bindings, excluding the binding module itself', 'pyxb.standard.bindings'),
    ('u', 'schema-uri', True, 'The URI for the schema from which bindings are to be generated', 'http://schemas.xmlsoap.org/wsdl/'),
    ('p', 'schema-prefix', True, 'The prefix (base module name) for the generated schema', 'wsdl'),
    ('r', 'generate-raw-binding', False, 'Generate the bindings in a subdirectory "raw" so that customized wrappers can be written', None),
    ('C', 'save-component-model', False, 'Save the XMLSchema component model in a serialized format', None),
    ('W', 'uri-is-wsdl', False, 'The schema-uri refers to a WSDL definition', None)
]
    
short_opt = ''
long_opt = []
for (flag, long_flag, has_arg, description, example) in options:
    if has_arg:
        short_opt += flag + ':'
        long_opt.append('%s=' % (long_flag,))
    else:
        short_opt += flag
        long_opt.append(long_flag)

def usage ():
    global options
    print 'Usage: %s options' % (sys.argv[0],)
    for (flag, long_flag, has_arg, description, example) in options:
        arg = ""
        if has_arg:
            arg = " arg"
        print "  --%s%s\n      %s" % (long_flag, arg, description)
        if example is not None:
            print "      Example: --%s %s" % (long_flag, example)
        if flag is not None:
            print "      Alternative: -%s%s" % (flag, arg)

try:
    (opts, args) = getopt.getopt(sys.argv[1:], short_opt, long_opt)
except getopt.GetoptError:
    usage()
    sys.exit(1)
for (o, a) in opts:
    if o in ('-m', '--module-path-prefix'):
        module_path_prefix = a
    elif o in ('-u', '--schema-uri'):
        schema_uri = a
    elif o in ('-p', '--schema-prefix'):
        schema_prefix = a
    elif o in ('-r', '--generate-raw-binding'):
        generate_raw_binding = True
    elif o in ('-C', '--save-component-model'):
        save_component_model = True
    elif o in ('-W', '--uri-is-wsdl'):
        uri_is_wsdl = True
    else:
        print 'Unrecognized option %s' % (o,)
        usage()
        sys.exit(1)

if module_path_prefix is None:
    print 'Require --module-path-prefix'
    sys.exit(1)

if not schema_prefix:
    print 'Require --schema-prefix'
    sys.exit(1)

binding_path = module_path_prefix.replace('.', '/')
if not binding_path:
    binding_path = '.'
if generate_raw_binding:
    binding_path += '/raw'
if save_component_model:
    component_model_file = '%s/%s.wxs' % (binding_path, schema_prefix)
binding_file = '%s/%s.py' % (binding_path, schema_prefix)

import sys
import traceback
from xml.dom import minidom
from xml.dom import Node
import urllib2
     
if schema_uri is None:
    print 'Require --schema-uri'
    sys.exit(1)

schema_reader = None
try:
    schema_reader = open(schema_uri, 'r')
except IOError, e:
    pass
if schema_reader is None:
    try:
        schema_reader = urllib2.urlopen(schema_uri)
    except Exception, e:
        print 'Unable to read schema URI: %s' % (e,)
        sys.exit(1)

schema = schema_reader.read()
#print schema

doc = minidom.parseString(schema)
dom = doc.documentElement

if uri_is_wsdl:
    import pyxb.standard.bindings.wsdl as wsdl
    spec = wsdl.definitions.CreateFromDOM(dom, process_schema=True)
    wxs = spec.schema()
else:
    wxs = pyxb.xmlschema.schema.CreateFromDOM(dom)

ns = wxs.targetNamespace()
ns.setModulePath('%s.%s' % (module_path_prefix, schema_prefix))

# Save binding source first, so name-in-binding is stored in the
# parsed schema file
try:
    for ins in wxs.importedNamespaces():
        if ins.schema() is not None:
            ns = ins.namespace()
            if ns.isAbsentNamespace():
                ns._overrideAbsentNamespace('URN:%s' % (prefix,))
            print 'Need to generate binding for imported %s as %s' % (ns.uri(), ns.modulePath())
            binding_source = GeneratePython(schema=ins.schema())
            ns.saveToFile('%s/%s.wxs' % (binding_path, ns.modulePath()))
    binding_source = GeneratePython(schema=wxs)
    print 'Binding source is %d long to %s' % (len(binding_source), binding_file)
    file(binding_file, "w").write(binding_source)
    print 'Saved binding source to %s' % (binding_file,)
except Exception, e:
    print 'Exception generating bindings to %s: %s' % (binding_file, e)
    traceback.print_exception(*sys.exc_info())
    sys.exit(3)

if save_component_model:
    try:
        ns = wxs.targetNamespace()
        ns.saveToFile(component_model_file)
        print 'Saved parsed schema to %s URI %s' % (component_model_file, ns.uri())
    except Exception, e:
        print 'Exception saving preprocessed schema to %s: %s' % (componen_model_file, e)
        traceback.print_exception(*sys.exc_info())
        sys.exit(2)

# LocalVariables:
# mode:python
# End:

